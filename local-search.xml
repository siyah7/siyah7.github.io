<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Stream Ciphers 题解</title>
    <link href="/2025/04/27/Stream-Ciphers-%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/04/27/Stream-Ciphers-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Symmetry"><a href="#Symmetry" class="headerlink" title="Symmetry"></a>Symmetry</h1><h2 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1. 题目分析"></a>1. 题目分析</h2><p>题目提供了一个基于AES-OFB加密的web服务，暴露了两个关键接口：</p><h3 id="1-1-接口说明"><a href="#1-1-接口说明" class="headerlink" title="1.1 接口说明"></a>1.1 接口说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/symmetry/encrypt/&lt;plaintext&gt;/&lt;iv&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plaintext, iv</span>):<br>    <span class="hljs-comment"># 允许用户用指定IV加密任意明文</span><br>    <span class="hljs-comment"># 返回加密结果</span><br><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/symmetry/encrypt_flag/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>():<br>    <span class="hljs-comment"># 用随机IV加密FLAG</span><br>    <span class="hljs-comment"># 返回 IV+加密后的FLAG</span><br></code></pre></td></tr></table></figure><h3 id="1-2-加密模式分析"><a href="#1-2-加密模式分析" class="headerlink" title="1.2 加密模式分析"></a>1.2 加密模式分析</h3><p>服务使用了AES的OFB(Output Feedback)模式，这种模式的特点是：</p><ul><li>先生成一个密钥流</li><li>然后将密钥流与明文进行XOR运算</li><li>相同的IV和密钥会产生相同的密钥流</li></ul><p><img src="/img/OFB.png"></p><h2 id="2-攻击原理"><a href="#2-攻击原理" class="headerlink" title="2. 攻击原理"></a>2. 攻击原理</h2><h3 id="获取FLAG密文和IV："><a href="#获取FLAG密文和IV：" class="headerlink" title="获取FLAG密文和IV："></a><strong>获取FLAG密文和IV</strong>：</h3><ul><li>调用<code>encrypt_flag</code>接口获取<code>IV||密文</code></li></ul><h3 id="生成相同密钥流："><a href="#生成相同密钥流：" class="headerlink" title="生成相同密钥流："></a><strong>生成相同密钥流</strong>：</h3><ul><li>使用获取到的IV加密一段全零数据</li><li>因为<code>0 XOR 密钥流 = 密钥流</code>，所以结果就是密钥流本身</li></ul><h3 id="解密FLAG："><a href="#解密FLAG：" class="headerlink" title="解密FLAG："></a><strong>解密FLAG</strong>：</h3><ul><li>将FLAG密文与密钥流进行XOR运算</li><li>得到原始FLAG明文</li></ul><h3 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel">FLAG密文 = FLAG明文 <span class="hljs-built_in">XOR</span> 密钥流<br>全零密文 = 全零明文 <span class="hljs-built_in">XOR</span> 密钥流 = 密钥流<br><br>=&gt; FLAG明文 = FLAG密文 <span class="hljs-built_in">XOR</span> 密钥流<br>           = FLAG密文 <span class="hljs-built_in">XOR</span> 全零密文<br></code></pre></td></tr></table></figure><h2 id="3-实现代码"><a href="#3-实现代码" class="headerlink" title="3. 实现代码"></a>3. 实现代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    <span class="hljs-comment"># 1. 获取加密后的FLAG</span><br>    response = requests.get(<span class="hljs-string">&#x27;http://aes.cryptohack.org/symmetry/encrypt_flag/&#x27;</span>)<br>    data = response.json()<br>    ciphertext_hex = data[<span class="hljs-string">&#x27;ciphertext&#x27;</span>]<br>    <br>    <span class="hljs-comment"># 分离IV和FLAG密文</span><br>    iv_hex = ciphertext_hex[:<span class="hljs-number">32</span>]  <span class="hljs-comment"># IV是前16字节(32个十六进制字符)</span><br>    encrypted_flag_hex = ciphertext_hex[<span class="hljs-number">32</span>:]<br>    <br>    <span class="hljs-comment"># 2. 使用相同IV加密全零数据来获取密钥流</span><br>    flag_len = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bytes</span>.fromhex(encrypted_flag_hex))<br>    zero_plaintext = <span class="hljs-string">b&#x27;\x00&#x27;</span> * flag_len<br>    <br>    response = requests.get(<br>        <span class="hljs-string">f&#x27;http://aes.cryptohack.org/symmetry/encrypt/<span class="hljs-subst">&#123;zero_plaintext.<span class="hljs-built_in">hex</span>()&#125;</span>/<span class="hljs-subst">&#123;iv_hex&#125;</span>/&#x27;</span><br>    )<br>    data = response.json()<br>    encrypted_zero_hex = data[<span class="hljs-string">&#x27;ciphertext&#x27;</span>]<br>    <br>    <span class="hljs-comment"># 3. 解密FLAG</span><br>    keystream = <span class="hljs-built_in">bytes</span>.fromhex(encrypted_zero_hex)<br>    encrypted_flag = <span class="hljs-built_in">bytes</span>.fromhex(encrypted_flag_hex)<br>    flag = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(encrypted_flag, keystream)])<br>    <br>    <span class="hljs-built_in">print</span>(flag.decode())<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exploit()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Block Ciphers 1 题解</title>
    <link href="/2025/04/20/Block%20Ciphers%201%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/04/20/Block%20Ciphers%201%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Flipping-Cookie"><a href="#Flipping-Cookie" class="headerlink" title="Flipping Cookie"></a>Flipping Cookie</h1><h2 id="一、题目分析"><a href="#一、题目分析" class="headerlink" title="一、题目分析"></a>一、题目分析</h2><p>题目使用了 AES 的 CBC 加密模式，提供了两个核心接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 检查 cookie</span><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flipping_cookie/check_admin/&lt;cookie&gt;/&lt;iv&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_admin</span>(<span class="hljs-params">cookie, iv</span>):<br>    cookie = <span class="hljs-built_in">bytes</span>.fromhex(cookie)<br>    iv = <span class="hljs-built_in">bytes</span>.fromhex(iv)<br>    cipher = AES.new(KEY, AES.MODE_CBC, iv)<br>    decrypted = cipher.decrypt(cookie)<br>    unpadded = unpad(decrypted, <span class="hljs-number">16</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;admin=True&quot;</span> <span class="hljs-keyword">in</span> unpadded.split(<span class="hljs-string">b&quot;;&quot;</span>):<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;flag&quot;</span>: FLAG&#125;<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Only admin can read the flag&quot;</span>&#125;<br><br><span class="hljs-comment"># 获取 cookie</span><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flipping_cookie/get_cookie/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cookie</span>():<br>    expires_at = (datetime.today() + timedelta(days=<span class="hljs-number">1</span>)).strftime(<span class="hljs-string">&quot;%s&quot;</span>)<br>    cookie = <span class="hljs-string">f&quot;admin=False;expiry=<span class="hljs-subst">&#123;expires_at&#125;</span>&quot;</span>.encode()<br><br>    iv = os.urandom(<span class="hljs-number">16</span>)<br>    padded = pad(cookie, <span class="hljs-number">16</span>)<br>    cipher = AES.new(KEY, AES.MODE_CBC, iv)<br>    encrypted = cipher.encrypt(padded)<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;cookie&quot;</span>: iv.<span class="hljs-built_in">hex</span>() + encrypted.<span class="hljs-built_in">hex</span>()&#125;<br></code></pre></td></tr></table></figure><p>加密方式：<code>AES-CBC</code><br>块大小：<code>16 字节</code><br>明文格式：<code>b&quot;admin=False;expiry=...&quot;</code>，结构如下：</p><ul><li>第一块（Block 0）：<code>admin=False;</code></li><li>第二块（Block 1）：<code>expiry=xxx</code></li></ul><p>判断管理员的条件：解密后的明文中包含 <code>b&quot;admin=True&quot;</code> 子字符串，因此可用比特翻转攻击将<code>False</code>改为<code>True</code></p><h2 id="二、比特翻转攻击原理"><a href="#二、比特翻转攻击原理" class="headerlink" title="二、比特翻转攻击原理"></a>二、比特翻转攻击原理</h2><h3 id="1-CBC模式解密过程"><a href="#1-CBC模式解密过程" class="headerlink" title="1. CBC模式解密过程"></a>1. CBC模式解密过程</h3><p>在CBC模式中，解密公式为：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">Plaintext_block[<span class="hljs-built_in">n</span>] = Decrypt(Ciphertext_block[<span class="hljs-built_in">n</span>]) <span class="hljs-built_in">XOR</span> Previous_Ciphertext_block<br></code></pre></td></tr></table></figure><ul><li>对于第一个块，<code>Previous_Ciphertext_block</code>就是IV</li><li>因此修改IV会直接影响第一个明文块的解密结果</li></ul><h3 id="2-比特翻转的核心思想"><a href="#2-比特翻转的核心思想" class="headerlink" title="2. 比特翻转的核心思想"></a>2. 比特翻转的核心思想</h3><p>若想将明文中的某个字节<code>X</code>改为<code>Y</code>，只需对IV中对应位置的字节执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">New_IV_byte = <span class="hljs-keyword">Original_IV_byte </span><span class="hljs-keyword">XOR </span>X <span class="hljs-keyword">XOR </span>Y<br></code></pre></td></tr></table></figure><p>解密时：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">New_Plain_byte = Decrypt(Ciphertext_byte) <span class="hljs-keyword">XOR </span>New_IV_byte<br>              = (<span class="hljs-keyword">Original_Plain_byte </span><span class="hljs-keyword">XOR </span><span class="hljs-keyword">Original_IV_byte) </span><span class="hljs-keyword">XOR </span>(<span class="hljs-keyword">Original_IV_byte </span><span class="hljs-keyword">XOR </span>X <span class="hljs-keyword">XOR </span>Y)<br>              = <span class="hljs-keyword">Original_Plain_byte </span><span class="hljs-keyword">XOR </span>X <span class="hljs-keyword">XOR </span>Y<br>              = Y  <span class="hljs-comment"># 当Original_Plain_byte == X时</span><br></code></pre></td></tr></table></figure><h2 id="三、攻击流程"><a href="#三、攻击流程" class="headerlink" title="三、攻击流程"></a>三、攻击流程</h2><p>原始cookie明文格式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">admin</span>=<span class="hljs-literal">False</span><span class="hljs-comment">;expiry=1682018400</span><br></code></pre></td></tr></table></figure><p>被AES CBC加密后分成多个16字节块：</p><ul><li><code>Block 0</code>（前16字节）: <code>admin=False;expi</code></li><li><code>Block 1</code>: 后续内容</li></ul><p>目标是将<code>admin=False</code>改为<code>admin=True</code>。</p><h3 id="1-计算XOR差分"><a href="#1-计算XOR差分" class="headerlink" title="1. 计算XOR差分"></a>1. 计算XOR差分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">original_plain = <span class="hljs-string">b&quot;admin=False;&quot;</span><br>target_plain   = <span class="hljs-string">b&quot;admin=True;&quot;</span><br>diff = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(original_plain, target_plain)])<br></code></pre></td></tr></table></figure><h3 id="2-获取原始Cookie"><a href="#2-获取原始Cookie" class="headerlink" title="2. 获取原始Cookie"></a>2. 获取原始Cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">resp = requests.get(<span class="hljs-string">&quot;http://aes.cryptohack.org/flipping_cookie/get_cookie/&quot;</span>).json()<br>full_cookie = <span class="hljs-built_in">bytes</span>.fromhex(resp[<span class="hljs-string">&quot;cookie&quot;</span>])<br>iv = full_cookie[:<span class="hljs-number">16</span>]<br>ciphertext = full_cookie[<span class="hljs-number">16</span>:]<br></code></pre></td></tr></table></figure><h3 id="3-伪造IV"><a href="#3-伪造IV" class="headerlink" title="3. 伪造IV"></a>3. 伪造IV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">forged_iv = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(iv, diff)]) + iv[<span class="hljs-built_in">len</span>(diff):]<br></code></pre></td></tr></table></figure><ul><li>将IV的前<code>len(diff)</code>字节与<code>diff</code>逐字节XOR</li><li>保留IV的剩余部分不变</li></ul><h3 id="4-提交攻击"><a href="#4-提交攻击" class="headerlink" title="4. 提交攻击"></a>4. 提交攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">check_url = <span class="hljs-string">f&quot;http://aes.cryptohack.org/flipping_cookie/check_admin/<span class="hljs-subst">&#123;ciphertext.<span class="hljs-built_in">hex</span>()&#125;</span>/<span class="hljs-subst">&#123;forged_iv.<span class="hljs-built_in">hex</span>()&#125;</span>/&quot;</span><br>flag = requests.get(check_url).json()<br></code></pre></td></tr></table></figure><h2 id="四、完整攻击脚本"><a href="#四、完整攻击脚本" class="headerlink" title="四、完整攻击脚本"></a>四、完整攻击脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 计算需要修改的字节差异</span><br>original_plain = <span class="hljs-string">b&quot;admin=False;&quot;</span><br>target_plain   = <span class="hljs-string">b&quot;admin=True;&quot;</span><br>diff = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(original_plain, target_plain)])<br><br><span class="hljs-comment"># 获取原始cookie</span><br>resp = requests.get(<span class="hljs-string">&quot;http://aes.cryptohack.org/flipping_cookie/get_cookie/&quot;</span>).json()<br>full_cookie = <span class="hljs-built_in">bytes</span>.fromhex(resp[<span class="hljs-string">&quot;cookie&quot;</span>])<br>iv = full_cookie[:<span class="hljs-number">16</span>]<br>ciphertext = full_cookie[<span class="hljs-number">16</span>:]<br><br><span class="hljs-comment"># 构造伪造的IV</span><br>forged_iv = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(iv, diff)]) + iv[<span class="hljs-built_in">len</span>(diff):]<br><br><span class="hljs-comment"># 提交攻击请求</span><br>check_url = <span class="hljs-string">f&quot;http://aes.cryptohack.org/flipping_cookie/check_admin/<span class="hljs-subst">&#123;ciphertext.<span class="hljs-built_in">hex</span>()&#125;</span>/<span class="hljs-subst">&#123;forged_iv.<span class="hljs-built_in">hex</span>()&#125;</span>/&quot;</span><br>flag = requests.get(check_url).json()<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="Lazy-CBC"><a href="#Lazy-CBC" class="headerlink" title="Lazy CBC"></a>Lazy CBC</h1><h2 id="一、题目："><a href="#一、题目：" class="headerlink" title="一、题目："></a>一、题目：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/lazy_cbc/encrypt/&lt;plaintext&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plaintext</span>):<br>    plaintext = <span class="hljs-built_in">bytes</span>.fromhex(plaintext)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(plaintext) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Data length must be multiple of 16&quot;</span>&#125;<br><br>    cipher = AES.new(KEY, AES.MODE_CBC, KEY)<br>    encrypted = cipher.encrypt(plaintext)<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;ciphertext&quot;</span>: encrypted.<span class="hljs-built_in">hex</span>()&#125;<br><br><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/lazy_cbc/get_flag/&lt;key&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>(<span class="hljs-params">key</span>):<br>    key = <span class="hljs-built_in">bytes</span>.fromhex(key)<br><br>    <span class="hljs-keyword">if</span> key == KEY:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;plaintext&quot;</span>: FLAG.encode().<span class="hljs-built_in">hex</span>()&#125;<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;invalid key&quot;</span>&#125;<br><br><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/lazy_cbc/receive/&lt;ciphertext&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">receive</span>(<span class="hljs-params">ciphertext</span>):<br>    ciphertext = <span class="hljs-built_in">bytes</span>.fromhex(ciphertext)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ciphertext) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Data length must be multiple of 16&quot;</span>&#125;<br><br>    cipher = AES.new(KEY, AES.MODE_CBC, KEY)<br>    decrypted = cipher.decrypt(ciphertext)<br><br>    <span class="hljs-keyword">try</span>:<br>        decrypted.decode() <span class="hljs-comment"># ensure plaintext is valid ascii</span><br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Invalid plaintext: &quot;</span> + decrypted.<span class="hljs-built_in">hex</span>()&#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-string">&quot;Your message has been received&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>这道题是经典的 <strong>AES CBC 模式下“懒惰使用密钥”的密钥恢复攻击</strong>（Lazy CBC key-recovery attack），我们可以<strong>直接恢复密钥 KEY</strong>，然后访问 <code>/lazy_cbc/get_flag/&lt;key&gt;/</code> 获取 <code>FLAG</code>。</p><hr><h2 id="二、攻击原理分析：CBC-模式-IV-KEY"><a href="#二、攻击原理分析：CBC-模式-IV-KEY" class="headerlink" title="二、攻击原理分析：CBC 模式 + IV &#x3D; KEY"></a>二、攻击原理分析：CBC 模式 + IV &#x3D; KEY</h2><p>题目中存在一个严重设计漏洞：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher = AES.new(KEY, AES.MODE_CBC, KEY)<br></code></pre></td></tr></table></figure><p>也就是说，它把 <strong>KEY 同时用作了 CBC 模式下的加密密钥和 IV（初始向量）</strong>。</p><hr><h3 id="CBC-模式加密结构如下："><a href="#CBC-模式加密结构如下：" class="headerlink" title="CBC 模式加密结构如下："></a>CBC 模式加密结构如下：</h3><p>对于明文块 P1、P2，CBC 模式加密为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">C1</span> <span class="hljs-operator">=</span> E(P1 XOR IV)<br><span class="hljs-attribute">C2</span> <span class="hljs-operator">=</span> E(P2 XOR C1)<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>E</code> 是加密操作</li><li><code>IV</code> 是初始向量（此题中为 KEY）</li></ul><hr><p>可以通过构造特定明文块，然后观察返回密文，反推出 <code>KEY = IV</code>。</p><hr><h2 id="三、构造输入获取密文块"><a href="#三、构造输入获取密文块" class="headerlink" title="三、构造输入获取密文块"></a>三、构造输入获取密文块</h2><p>构造如下明文输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">plaintext</span> = P1 || P2 = <span class="hljs-number">16</span>字节全<span class="hljs-number">0</span> + <span class="hljs-number">16</span>字节全<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>即 <code>P1 = P2 = b&quot;\x00&quot; * 16</code>，两块都是全 0。</p><h3 id="计算过程："><a href="#计算过程：" class="headerlink" title="计算过程："></a>计算过程：</h3><p>根据 CBC 模式的加密流程：</p><ul><li><code>C1 = E(P1 XOR IV) = E(0 ^ KEY) = E(KEY)</code></li><li><code>C2 = E(P2 XOR C1) = E(0 ^ C1) = E(C1)</code></li></ul><p>得到：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">C1</span> <span class="hljs-operator">=</span> E(KEY)<br><span class="hljs-attribute">C2</span> <span class="hljs-operator">=</span> E(C1)<br></code></pre></td></tr></table></figure><p>而程序允许提交任意明文，并返回加密后的密文。</p><hr><h3 id="提交构造密文恢复-KEY"><a href="#提交构造密文恢复-KEY" class="headerlink" title="提交构造密文恢复 KEY"></a>提交构造密文恢复 KEY</h3><p>接下来构造密文：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ciphertext</span> = <span class="hljs-built_in">C1</span> <span class="hljs-title">||</span> <span class="hljs-number">0</span> <span class="hljs-title">||</span> <span class="hljs-built_in">C1</span><br></code></pre></td></tr></table></figure><p>即三块密文：</p><ul><li>第1块 &#x3D; 原来的 C1</li><li>第2块 &#x3D; 全0块</li><li>第3块 &#x3D; 原来的 C1</li></ul><p>然后将其提交给 <code>/receive/</code> 接口解密。</p><h4 id="解密过程："><a href="#解密过程：" class="headerlink" title="解密过程："></a>解密过程：</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">P1</span><span class="hljs-operator">&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">(</span><span class="hljs-variable">C1</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">^</span> <span class="hljs-variable">IV</span>          <span class="hljs-type">#</span> <span class="hljs-variable">IV</span> <span class="hljs-operator">==</span> <span class="hljs-variable">KEY</span><br><span class="hljs-variable">P2</span><span class="hljs-operator">&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">^</span> <span class="hljs-variable">C1</span><br><span class="hljs-variable">P3</span><span class="hljs-operator">&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">(</span><span class="hljs-variable">C1</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">^</span> <span class="hljs-number">0</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">(</span><span class="hljs-variable">C1</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>得到：</p><ul><li><code>P1&#39; = D(C1) ^ KEY</code></li><li><code>P3&#39; = D(C1)</code></li></ul><p>因此：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">KEY</span> = P1<span class="hljs-string">&#x27; ^ P3&#x27;</span><br></code></pre></td></tr></table></figure><p>即只需要异或服务器返回的第1块明文与第3块明文，即可恢复 KEY</p><hr><h2 id="四、完整攻击脚本-1"><a href="#四、完整攻击脚本-1" class="headerlink" title="四、完整攻击脚本"></a>四、完整攻击脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br>url = <span class="hljs-string">&quot;http://aes.cryptohack.org&quot;</span><br><br><span class="hljs-comment"># Step 1: 构造 2 块全0的明文，长度为 32 字节</span><br>plaintext = <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">32</span><br>resp = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/lazy_cbc/encrypt/<span class="hljs-subst">&#123;plaintext.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>).json()<br>ciphertext = <span class="hljs-built_in">bytes</span>.fromhex(resp[<span class="hljs-string">&#x27;ciphertext&#x27;</span>])<br><br><span class="hljs-comment"># 提取 C1</span><br>C1 = ciphertext[:<span class="hljs-number">16</span>]<br><br><span class="hljs-comment"># 构造 payload: C1 || 0 || C1</span><br>payload = C1 + <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span> + C1<br><br><span class="hljs-comment"># Step 2: 提交构造的密文</span><br>resp = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/lazy_cbc/receive/<span class="hljs-subst">&#123;payload.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>).json()<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;error&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Exploit failed&quot;</span>)<br>    exit()<br><br><span class="hljs-comment"># Step 3: 恢复 KEY</span><br>decrypted = <span class="hljs-built_in">bytes</span>.fromhex(resp[<span class="hljs-string">&#x27;error&#x27;</span>].split(<span class="hljs-string">&quot;: &quot;</span>)[<span class="hljs-number">1</span>])<br>P1 = decrypted[:<span class="hljs-number">16</span>]<br>P3 = decrypted[<span class="hljs-number">32</span>:<span class="hljs-number">48</span>]<br>KEY = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(P1, P3)])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered KEY:&quot;</span>, KEY.<span class="hljs-built_in">hex</span>())<br><br><span class="hljs-comment"># Step 4: 拿 flag</span><br>resp = requests.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/lazy_cbc/get_flag/<span class="hljs-subst">&#123;KEY.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>).json()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(resp[<span class="hljs-string">&#x27;plaintext&#x27;</span>]).decode())<br></code></pre></td></tr></table></figure><hr><h1 id="Triple-DES"><a href="#Triple-DES" class="headerlink" title="Triple DES"></a>Triple DES</h1><h2 id="一、题目分析-1"><a href="#一、题目分析-1" class="headerlink" title="一、题目分析"></a>一、题目分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">IV = os.urandom(<span class="hljs-number">8</span>)<br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/triple_des/encrypt/&lt;key&gt;/&lt;plaintext&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">key, plaintext</span>):<br>    <span class="hljs-keyword">try</span>:<br>        key = <span class="hljs-built_in">bytes</span>.fromhex(key)<br>        plaintext = <span class="hljs-built_in">bytes</span>.fromhex(plaintext)<br>        plaintext = xor(plaintext, IV)<br><br>        cipher = DES3.new(key, DES3.MODE_ECB)<br>        ciphertext = cipher.encrypt(plaintext)<br>        ciphertext = xor(ciphertext, IV)<br><br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;ciphertext&quot;</span>: ciphertext.<span class="hljs-built_in">hex</span>()&#125;<br><br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;<br><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/triple_des/encrypt_flag/&lt;key&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>(<span class="hljs-params">key</span>):<br>    <span class="hljs-keyword">return</span> encrypt(key, pad(FLAG.encode(), <span class="hljs-number">8</span>).<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><p>题目提供了两个接口：</p><ul><li><code>/encrypt_flag/&lt;key&gt;/</code>：使用给定 key 对服务器内置 FLAG 进行加密</li><li><code>/encrypt/&lt;key&gt;/&lt;plaintext&gt;/</code>：对任意明文进行加密</li></ul><p>加密逻辑如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plaintext = xor(plaintext, IV)<br>ciphertext = cipher.encrypt(plaintext)<br>ciphertext = xor(ciphertext, IV)<br></code></pre></td></tr></table></figure><p>其中 <code>IV</code> 为随机生成的 8 字节初始向量，<code>cipher</code> 为 <code>DES3.new(key, DES3.MODE_ECB)</code>。</p><h2 id="二、DES弱密钥"><a href="#二、DES弱密钥" class="headerlink" title="二、DES弱密钥"></a>二、DES弱密钥</h2><p>在DES中，有4个<strong>绝对弱密钥</strong>和6对<strong>半弱密钥</strong>。这些密钥的特点是：</p><ol><li><p><strong>绝对弱密钥</strong>：使得加密和解密操作相同，即E(E(x)) &#x3D; x</p><ul><li>0x0101010101010101</li><li>0xFEFEFEFEFEFEFEFE</li><li>0xE0E0E0E0F1F1F1F1</li><li>0x1F1F1F1F0E0E0E0E</li><li>数学性质：Eₖ(Eₖ(x)) &#x3D; x</li></ul></li><li><p><strong>半弱密钥</strong>：成对出现，一个密钥的加密等同于另一个密钥的解密</p><ul><li>示例对：(0x011F011F010E010E, 0x1F011F010E010E01)</li><li>数学性质：E_{k1}(x) &#x3D; D_{k2}(x)</li></ul></li></ol><p>这些弱密钥产生的原因是DES密钥调度算法中的对称性导致的。</p><h3 id="3DES弱密钥扩展"><a href="#3DES弱密钥扩展" class="headerlink" title="3DES弱密钥扩展"></a>3DES弱密钥扩展</h3><p>3DES通常使用EDE模式(加密-解密-加密)：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">C = E_</span><span class="hljs-template-variable">&#123;K1&#125;</span><span class="language-xml">(D_</span><span class="hljs-template-variable">&#123;K2&#125;</span><span class="language-xml">(E_</span><span class="hljs-template-variable">&#123;K3&#125;</span><span class="language-xml">(P)))</span><br></code></pre></td></tr></table></figure><p>当K1&#x3D;K3时，有以下特性：</p><ol><li>如果K1&#x3D;K3且K2都是弱密钥，单次3DES可能成为恒等操作</li><li>某些组合需要两次加密才能恢复明文</li></ol><h3 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h3><p>考虑密钥结构：</p><ul><li>K1 &#x3D; K3 &#x3D; 弱密钥A</li><li>K2 &#x3D; 弱密钥B</li></ul><p>单次加密：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">C1</span> = <span class="hljs-function"><span class="hljs-title">E_A</span>(<span class="hljs-title">D_B</span>(<span class="hljs-title">E_A</span>(<span class="hljs-variable">P</span>)))</span><br></code></pre></td></tr></table></figure><p>两次加密：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">C2</span> = <span class="hljs-function"><span class="hljs-title">E_A</span>(<span class="hljs-title">D_B</span>(<span class="hljs-title">E_A</span>(<span class="hljs-variable">C1</span>)))</span><br>   = <span class="hljs-function"><span class="hljs-title">E_A</span>(<span class="hljs-title">D_B</span>(<span class="hljs-title">E_A</span>(<span class="hljs-title">E_A</span>(<span class="hljs-title">D_B</span>(<span class="hljs-title">E_A</span>(<span class="hljs-variable">P</span>))))))</span><br>   <br>利用<span class="hljs-variable">E_A</span>∘<span class="hljs-variable">E_A</span> = <span class="hljs-variable">I</span>和<span class="hljs-variable">D_B</span>∘<span class="hljs-variable">D_B</span> = <span class="hljs-variable">I</span>：<br>   = <span class="hljs-function"><span class="hljs-title">E_A</span>(<span class="hljs-title">D_B</span>(<span class="hljs-title">D_B</span>(<span class="hljs-title">E_A</span>(<span class="hljs-variable">P</span>))))</span><br>   = <span class="hljs-function"><span class="hljs-title">E_A</span>(<span class="hljs-title">E_A</span>(<span class="hljs-variable">P</span>))</span><br>   = <span class="hljs-variable">P</span><br></code></pre></td></tr></table></figure><h2 id="三、攻击原理"><a href="#三、攻击原理" class="headerlink" title="三、攻击原理"></a>三、攻击原理</h2><h3 id="第一步：获取加密后的FLAG"><a href="#第一步：获取加密后的FLAG" class="headerlink" title="第一步：获取加密后的FLAG"></a>第一步：获取加密后的FLAG</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">response = requests.get(URL + <span class="hljs-string">&quot;/encrypt_flag/E0E0E0E0.../&quot;</span>)<br>C1 = response.json()[<span class="hljs-string">&quot;ciphertext&quot;</span>]  <span class="hljs-comment"># C1 = IV ⊕ E_K(IV ⊕ Flag)</span><br></code></pre></td></tr></table></figure><h3 id="第二步：对C1再次加密"><a href="#第二步：对C1再次加密" class="headerlink" title="第二步：对C1再次加密"></a>第二步：对C1再次加密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">response = requests.get(URL + <span class="hljs-string">f&quot;/encrypt/E0E0E0E0.../<span class="hljs-subst">&#123;C1&#125;</span>/&quot;</span>)<br>C2 = response.json()[<span class="hljs-string">&quot;ciphertext&quot;</span>]  <span class="hljs-comment"># C2 = IV ⊕ E_K(IV ⊕ C1)</span><br></code></pre></td></tr></table></figure><p>将C2的表达式完全展开：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">C2 = IV ⊕ E_K(IV ⊕ C1)<br>   = IV ⊕ E_K(IV ⊕ (IV ⊕ E_K(IV ⊕ Flag)))  <span class="hljs-comment"># 代入C1的表达式</span><br>   = IV ⊕ E_K(E_K(IV ⊕ Flag))              <span class="hljs-comment"># 因为IV ⊕ IV = 0</span><br></code></pre></td></tr></table></figure><p>由于我们使用的是弱密钥K，满足<code>E_K(E_K(x)) = x</code>，因此：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">C2 = IV ⊕ (IV ⊕ Flag)     <span class="hljs-comment"># 应用弱密钥特性</span><br>   = (IV ⊕ IV) ⊕ Flag     <span class="hljs-comment"># 异或结合律</span><br>   = 0 ⊕ Flag             <span class="hljs-comment"># 因为IV ⊕ IV = 0</span><br>   = Flag                 <span class="hljs-comment"># 0 ⊕ x = x</span><br></code></pre></td></tr></table></figure><h2 id="四、完整攻击脚本-2"><a href="#四、完整攻击脚本-2" class="headerlink" title="四、完整攻击脚本"></a>四、完整攻击脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">key_hex = <span class="hljs-string">&#x27;E0E0E0E0F1F1F1F11F1F1F1F0E0E0E0EE0E0E0E0F1F1F1F1&#x27;</span><br>resp = requests.get(<span class="hljs-string">f&quot;https://aes.cryptohack.org/triple_des/encrypt_flag/<span class="hljs-subst">&#123;key_hex&#125;</span>/&quot;</span>)<br>C1 = resp.json()[<span class="hljs-string">&quot;ciphertext&quot;</span>]<br>resp = requests.get(<span class="hljs-string">f&quot;https://aes.cryptohack.org/triple_des/encrypt/<span class="hljs-subst">&#123;key_hex&#125;</span>/<span class="hljs-subst">&#123;C1&#125;</span>/&quot;</span>)<br>C2 = <span class="hljs-built_in">bytes</span>.fromhex(resp.json()[<span class="hljs-string">&quot;ciphertext&quot;</span>])<br><span class="hljs-built_in">print</span>(C2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建与部署博客</title>
    <link href="/2025/04/19/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/04/19/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Hexo-搭建与部署博客"><a href="#Hexo-搭建与部署博客" class="headerlink" title="Hexo 搭建与部署博客"></a>Hexo 搭建与部署博客</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="(1) 安装 Node.js"></a>(1) 安装 Node.js</h3><p>访问 Node.js 官网：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a>，下载并安装对应版本。</p><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v  <span class="hljs-comment"># 显示版本号（如 v18.16.0）</span><br>npm -v   <span class="hljs-comment"># 显示版本号（如 9.5.1）</span><br></code></pre></td></tr></table></figure><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="(2) 安装 Git"></a>(2) 安装 Git</h3><p>访问 <a href="https://git-scm.com/downloads/win">Git for Windows</a> 下载并安装，保持默认选项。</p><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version  <span class="hljs-comment"># 显示版本号（如 git version 2.40.0）</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-初始化-Hexo-项目"><a href="#2-初始化-Hexo-项目" class="headerlink" title="2. 初始化 Hexo 项目"></a>2. 初始化 Hexo 项目</h2><h3 id="1-安装-Hexo-命令行工具"><a href="#1-安装-Hexo-命令行工具" class="headerlink" title="(1) 安装 Hexo 命令行工具"></a>(1) 安装 Hexo 命令行工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="2-创建博客文件夹并初始化"><a href="#2-创建博客文件夹并初始化" class="headerlink" title="(2) 创建博客文件夹并初始化"></a>(2) 创建博客文件夹并初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog  <span class="hljs-comment"># 创建项目文件夹</span><br><span class="hljs-built_in">cd</span> myblog         <span class="hljs-comment"># 进入项目目录</span><br>npm install       <span class="hljs-comment"># 安装依赖</span><br></code></pre></td></tr></table></figure><h3 id="3-启动本地测试服务器"><a href="#3-启动本地测试服务器" class="headerlink" title="(3) 启动本地测试服务器"></a>(3) 启动本地测试服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server  <span class="hljs-comment"># 或 hexo s</span><br></code></pre></td></tr></table></figure><p>在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>，看到默认博客页面即表示成功。</p><hr><h2 id="3-写文章与生成静态文件"><a href="#3-写文章与生成静态文件" class="headerlink" title="3. 写文章与生成静态文件"></a>3. 写文章与生成静态文件</h2><h3 id="1-创建新文章"><a href="#1-创建新文章" class="headerlink" title="(1) 创建新文章"></a>(1) 创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;我的第一篇文章&quot;</span><br></code></pre></td></tr></table></figure><p>文章会生成在 <code>source/_posts/我的第一篇文章.md</code>，使用 Markdown 编辑器（如 VS Code）编辑文章内容。</p><h3 id="2-生成静态文件"><a href="#2-生成静态文件" class="headerlink" title="(2) 生成静态文件"></a>(2) 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate  <span class="hljs-comment"># 或 hexo clean &amp;&amp; hexo g</span><br></code></pre></td></tr></table></figure><p>生成的静态文件会保存在 <code>public/</code> 目录下（包括 <code>index.html</code>、<code>css/</code>、<code>js/</code> 等）。</p><hr><h2 id="4-部署到-GitHub-Pages"><a href="#4-部署到-GitHub-Pages" class="headerlink" title="4. 部署到 GitHub Pages"></a>4. 部署到 GitHub Pages</h2><h3 id="1-创建-GitHub-仓库"><a href="#1-创建-GitHub-仓库" class="headerlink" title="(1) 创建 GitHub 仓库"></a>(1) 创建 GitHub 仓库</h3><ul><li>登录 GitHub，新建仓库，命名为：<code>用户名.github.io</code></li><li>仓库需设为 Public（免费账户不支持私有 GitHub Pages）</li></ul><h3 id="2-安装部署插件"><a href="#2-安装部署插件" class="headerlink" title="(2) 安装部署插件"></a>(2) 安装部署插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="3-修改-Hexo-配置"><a href="#3-修改-Hexo-配置" class="headerlink" title="(3) 修改 Hexo 配置"></a>(3) 修改 Hexo 配置</h3><p>打开 <code>myblog/_config.yml</code>，修改如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://用户名.github.io</span>  <span class="hljs-comment"># 替换为你的 GitHub Pages 地址</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/用户名/用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h3 id="4-执行部署命令"><a href="#4-执行部署命令" class="headerlink" title="(4) 执行部署命令"></a>(4) 执行部署命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy  <span class="hljs-comment"># 或 hexo d</span><br></code></pre></td></tr></table></figure><p>首次部署可能要求输入 GitHub 账号密码，推荐配置 SSH 密钥以免密登录。</p><hr><h2 id="5-访问博客"><a href="#5-访问博客" class="headerlink" title="5. 访问博客"></a>5. 访问博客</h2><p>等待 1-2 分钟后访问：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//用户名.github.io</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-后续更新博客"><a href="#6-后续更新博客" class="headerlink" title="6. 后续更新博客"></a>6. 后续更新博客</h2><p>写新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;新文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>重新生成并部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><hr><h2 id="使用-SSH-方式替代-HTTPS（Windows操作系统）"><a href="#使用-SSH-方式替代-HTTPS（Windows操作系统）" class="headerlink" title="使用 SSH 方式替代 HTTPS（Windows操作系统）"></a>使用 SSH 方式替代 HTTPS（Windows操作系统）</h2><h3 id="1-删除旧-SSH-密钥（如果有）"><a href="#1-删除旧-SSH-密钥（如果有）" class="headerlink" title="(1) 删除旧 SSH 密钥（如果有）"></a>(1) 删除旧 SSH 密钥（如果有）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">del %USERPROFILE%\.ssh\id_ed25519*<br></code></pre></td></tr></table></figure><h3 id="2-生成新-SSH-密钥"><a href="#2-生成新-SSH-密钥" class="headerlink" title="(2) 生成新 SSH 密钥"></a>(2) 生成新 SSH 密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><ul><li>回车接受默认路径（<code>%USERPROFILE%\.ssh\id_ed25519</code>）</li><li>可选设置密码</li></ul><h3 id="3-添加公钥到-GitHub"><a href="#3-添加公钥到-GitHub" class="headerlink" title="(3) 添加公钥到 GitHub"></a>(3) 添加公钥到 GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> %USERPROFILE%\.ssh\id_ed25519.pub<br></code></pre></td></tr></table></figure><ul><li>全选输出内容（以 <code>ssh-ed25519</code> 开头）</li><li>访问 <a href="https://github.com/settings/keys">GitHub SSH 设置页面</a></li><li>点击 “New SSH Key”，粘贴公钥内容</li></ul><h3 id="4-测试-SSH-连接"><a href="#4-测试-SSH-连接" class="headerlink" title="(4) 测试 SSH 连接"></a>(4) 测试 SSH 连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><h3 id="5-修改-Hexo-配置为-SSH-地址"><a href="#5-修改-Hexo-配置为-SSH-地址" class="headerlink" title="(5) 修改 Hexo 配置为 SSH 地址"></a>(5) 修改 Hexo 配置为 SSH 地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:用户名/用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h3 id="6-强制重新部署"><a href="#6-强制重新部署" class="headerlink" title="(6) 强制重新部署"></a>(6) 强制重新部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy --force<br></code></pre></td></tr></table></figure><hr><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>访问：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>例如使用 Butterfly 主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./themes<br>git <span class="hljs-built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly butterfly<br></code></pre></td></tr></table></figure><p>然后修改根目录下的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">butterfly</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/19/hello-world/"/>
    <url>/2025/04/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
