<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Flipping Cookie 题解</title>
    <link href="/2025/04/20/Flipping%20Cookie%20%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/04/20/Flipping%20Cookie%20%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Flipping-Cookie-题解"><a href="#Flipping-Cookie-题解" class="headerlink" title="Flipping Cookie 题解"></a>Flipping Cookie 题解</h1><h2 id="一、题目分析"><a href="#一、题目分析" class="headerlink" title="一、题目分析"></a>一、题目分析</h2><p>题目使用了 AES 的 CBC 加密模式，提供了两个核心接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 检查 cookie</span><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flipping_cookie/check_admin/&lt;cookie&gt;/&lt;iv&gt;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_admin</span>(<span class="hljs-params">cookie, iv</span>):<br>    cookie = <span class="hljs-built_in">bytes</span>.fromhex(cookie)<br>    iv = <span class="hljs-built_in">bytes</span>.fromhex(iv)<br>    cipher = AES.new(KEY, AES.MODE_CBC, iv)<br>    decrypted = cipher.decrypt(cookie)<br>    unpadded = unpad(decrypted, <span class="hljs-number">16</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;admin=True&quot;</span> <span class="hljs-keyword">in</span> unpadded.split(<span class="hljs-string">b&quot;;&quot;</span>):<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;flag&quot;</span>: FLAG&#125;<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Only admin can read the flag&quot;</span>&#125;<br><br><span class="hljs-comment"># 获取 cookie</span><br><span class="hljs-meta">@chal.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flipping_cookie/get_cookie/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cookie</span>():<br>    expires_at = (datetime.today() + timedelta(days=<span class="hljs-number">1</span>)).strftime(<span class="hljs-string">&quot;%s&quot;</span>)<br>    cookie = <span class="hljs-string">f&quot;admin=False;expiry=<span class="hljs-subst">&#123;expires_at&#125;</span>&quot;</span>.encode()<br><br>    iv = os.urandom(<span class="hljs-number">16</span>)<br>    padded = pad(cookie, <span class="hljs-number">16</span>)<br>    cipher = AES.new(KEY, AES.MODE_CBC, iv)<br>    encrypted = cipher.encrypt(padded)<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;cookie&quot;</span>: iv.<span class="hljs-built_in">hex</span>() + encrypted.<span class="hljs-built_in">hex</span>()&#125;<br></code></pre></td></tr></table></figure><p>加密方式：<code>AES-CBC</code><br>块大小：<code>16 字节</code><br>明文格式：<code>b&quot;admin=False;expiry=...&quot;</code>，结构如下：</p><ul><li>第一块（Block 0）：<code>admin=False;</code></li><li>第二块（Block 1）：<code>expiry=xxx</code></li></ul><p>判断管理员的条件：解密后的明文中包含 <code>b&quot;admin=True&quot;</code> 子字符串。</p><h2 id="二、比特翻转攻击原理"><a href="#二、比特翻转攻击原理" class="headerlink" title="二、比特翻转攻击原理"></a>二、比特翻转攻击原理</h2><h3 id="1-CBC模式解密过程"><a href="#1-CBC模式解密过程" class="headerlink" title="1. CBC模式解密过程"></a>1. CBC模式解密过程</h3><p>在CBC模式中，解密公式为：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">Plaintext_block[<span class="hljs-built_in">n</span>] = Decrypt(Ciphertext_block[<span class="hljs-built_in">n</span>]) <span class="hljs-built_in">XOR</span> Previous_Ciphertext_block<br></code></pre></td></tr></table></figure><ul><li>对于第一个块，<code>Previous_Ciphertext_block</code>就是IV</li><li>因此修改IV会直接影响第一个明文块的解密结果</li></ul><h3 id="2-比特翻转的核心思想"><a href="#2-比特翻转的核心思想" class="headerlink" title="2. 比特翻转的核心思想"></a>2. 比特翻转的核心思想</h3><p>若想将明文中的某个字节<code>X</code>改为<code>Y</code>，只需对IV中对应位置的字节执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">New_IV_byte = <span class="hljs-keyword">Original_IV_byte </span><span class="hljs-keyword">XOR </span>X <span class="hljs-keyword">XOR </span>Y<br></code></pre></td></tr></table></figure><p>解密时：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">New_Plain_byte = Decrypt(Ciphertext_byte) <span class="hljs-keyword">XOR </span>New_IV_byte<br>              = (<span class="hljs-keyword">Original_Plain_byte </span><span class="hljs-keyword">XOR </span><span class="hljs-keyword">Original_IV_byte) </span><span class="hljs-keyword">XOR </span>(<span class="hljs-keyword">Original_IV_byte </span><span class="hljs-keyword">XOR </span>X <span class="hljs-keyword">XOR </span>Y)<br>              = <span class="hljs-keyword">Original_Plain_byte </span><span class="hljs-keyword">XOR </span>X <span class="hljs-keyword">XOR </span>Y<br>              = Y  <span class="hljs-comment"># 当Original_Plain_byte == X时</span><br></code></pre></td></tr></table></figure><h2 id="三、攻击流程"><a href="#三、攻击流程" class="headerlink" title="三、攻击流程"></a>三、攻击流程</h2><p>原始cookie明文格式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">admin</span>=<span class="hljs-literal">False</span><span class="hljs-comment">;expiry=1682018400</span><br></code></pre></td></tr></table></figure><p>被AES CBC加密后分成多个16字节块：</p><ul><li><code>Block 0</code>（前16字节）: <code>admin=False;expi</code></li><li><code>Block 1</code>: 后续内容</li></ul><p>目标是将<code>admin=False</code>改为<code>admin=True</code>。</p><h3 id="1-计算XOR差分"><a href="#1-计算XOR差分" class="headerlink" title="1. 计算XOR差分"></a>1. 计算XOR差分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">original_plain = <span class="hljs-string">b&quot;admin=False;&quot;</span><br>target_plain   = <span class="hljs-string">b&quot;admin=True;&quot;</span><br>diff = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(original_plain, target_plain)])<br></code></pre></td></tr></table></figure><p>结果示例：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">original:</span> a d m i n <span class="hljs-operator">=</span> F a l s e <span class="hljs-comment">;</span><br><span class="hljs-symbol">target:</span>   a d m i n <span class="hljs-operator">=</span> T r u e <span class="hljs-comment">;</span><br>差分:    \<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">12</span>\<span class="hljs-keyword">x</span><span class="hljs-number">13</span>\<span class="hljs-keyword">x</span><span class="hljs-number">19</span>\<span class="hljs-keyword">x</span><span class="hljs-number">16</span>\<span class="hljs-keyword">x</span><span class="hljs-number">1</span>e\<span class="hljs-keyword">x</span><span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>其中<code>\x12</code>是<code>F(0x46) XOR T(0x54)</code>的结果</p><h3 id="2-获取原始Cookie"><a href="#2-获取原始Cookie" class="headerlink" title="2. 获取原始Cookie"></a>2. 获取原始Cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">resp = requests.get(<span class="hljs-string">&quot;http://aes.cryptohack.org/flipping_cookie/get_cookie/&quot;</span>).json()<br>full_cookie = <span class="hljs-built_in">bytes</span>.fromhex(resp[<span class="hljs-string">&quot;cookie&quot;</span>])<br>iv = full_cookie[:<span class="hljs-number">16</span>]<br>ciphertext = full_cookie[<span class="hljs-number">16</span>:]<br></code></pre></td></tr></table></figure><h3 id="3-伪造IV"><a href="#3-伪造IV" class="headerlink" title="3. 伪造IV"></a>3. 伪造IV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">forged_iv = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(iv, diff)]) + iv[<span class="hljs-built_in">len</span>(diff):]<br></code></pre></td></tr></table></figure><p>操作说明：</p><ul><li>将IV的前<code>len(diff)</code>字节与<code>diff</code>逐字节XOR</li><li>保留IV的剩余部分不变</li></ul><h3 id="4-提交攻击"><a href="#4-提交攻击" class="headerlink" title="4. 提交攻击"></a>4. 提交攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">check_url = <span class="hljs-string">f&quot;http://aes.cryptohack.org/flipping_cookie/check_admin/<span class="hljs-subst">&#123;ciphertext.<span class="hljs-built_in">hex</span>()&#125;</span>/<span class="hljs-subst">&#123;forged_iv.<span class="hljs-built_in">hex</span>()&#125;</span>/&quot;</span><br>flag = requests.get(check_url).json()<br></code></pre></td></tr></table></figure><h2 id="四、完整攻击脚本"><a href="#四、完整攻击脚本" class="headerlink" title="四、完整攻击脚本"></a>四、完整攻击脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 计算需要修改的字节差异</span><br>original_plain = <span class="hljs-string">b&quot;admin=False;&quot;</span><br>target_plain   = <span class="hljs-string">b&quot;admin=True;&quot;</span><br>diff = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(original_plain, target_plain)])<br><br><span class="hljs-comment"># 获取原始cookie</span><br>resp = requests.get(<span class="hljs-string">&quot;http://aes.cryptohack.org/flipping_cookie/get_cookie/&quot;</span>).json()<br>full_cookie = <span class="hljs-built_in">bytes</span>.fromhex(resp[<span class="hljs-string">&quot;cookie&quot;</span>])<br>iv = full_cookie[:<span class="hljs-number">16</span>]<br>ciphertext = full_cookie[<span class="hljs-number">16</span>:]<br><br><span class="hljs-comment"># 构造伪造的IV</span><br>forged_iv = <span class="hljs-built_in">bytes</span>([a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(iv, diff)]) + iv[<span class="hljs-built_in">len</span>(diff):]<br><br><span class="hljs-comment"># 提交攻击请求</span><br>check_url = <span class="hljs-string">f&quot;http://aes.cryptohack.org/flipping_cookie/check_admin/<span class="hljs-subst">&#123;ciphertext.<span class="hljs-built_in">hex</span>()&#125;</span>/<span class="hljs-subst">&#123;forged_iv.<span class="hljs-built_in">hex</span>()&#125;</span>/&quot;</span><br>flag = requests.get(check_url).json()<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建与部署博客</title>
    <link href="/2025/04/19/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/04/19/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Hexo-搭建与部署博客"><a href="#Hexo-搭建与部署博客" class="headerlink" title="Hexo 搭建与部署博客"></a>Hexo 搭建与部署博客</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="(1) 安装 Node.js"></a>(1) 安装 Node.js</h3><p>访问 Node.js 官网：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a>，下载并安装对应版本。</p><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v  <span class="hljs-comment"># 显示版本号（如 v18.16.0）</span><br>npm -v   <span class="hljs-comment"># 显示版本号（如 9.5.1）</span><br></code></pre></td></tr></table></figure><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="(2) 安装 Git"></a>(2) 安装 Git</h3><p>访问 <a href="https://git-scm.com/downloads/win">Git for Windows</a> 下载并安装，保持默认选项。</p><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version  <span class="hljs-comment"># 显示版本号（如 git version 2.40.0）</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-初始化-Hexo-项目"><a href="#2-初始化-Hexo-项目" class="headerlink" title="2. 初始化 Hexo 项目"></a>2. 初始化 Hexo 项目</h2><h3 id="1-安装-Hexo-命令行工具"><a href="#1-安装-Hexo-命令行工具" class="headerlink" title="(1) 安装 Hexo 命令行工具"></a>(1) 安装 Hexo 命令行工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="2-创建博客文件夹并初始化"><a href="#2-创建博客文件夹并初始化" class="headerlink" title="(2) 创建博客文件夹并初始化"></a>(2) 创建博客文件夹并初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog  <span class="hljs-comment"># 创建项目文件夹</span><br><span class="hljs-built_in">cd</span> myblog         <span class="hljs-comment"># 进入项目目录</span><br>npm install       <span class="hljs-comment"># 安装依赖</span><br></code></pre></td></tr></table></figure><h3 id="3-启动本地测试服务器"><a href="#3-启动本地测试服务器" class="headerlink" title="(3) 启动本地测试服务器"></a>(3) 启动本地测试服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server  <span class="hljs-comment"># 或 hexo s</span><br></code></pre></td></tr></table></figure><p>在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>，看到默认博客页面即表示成功。</p><hr><h2 id="3-写文章与生成静态文件"><a href="#3-写文章与生成静态文件" class="headerlink" title="3. 写文章与生成静态文件"></a>3. 写文章与生成静态文件</h2><h3 id="1-创建新文章"><a href="#1-创建新文章" class="headerlink" title="(1) 创建新文章"></a>(1) 创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;我的第一篇文章&quot;</span><br></code></pre></td></tr></table></figure><p>文章会生成在 <code>source/_posts/我的第一篇文章.md</code>，使用 Markdown 编辑器（如 VS Code）编辑文章内容。</p><h3 id="2-生成静态文件"><a href="#2-生成静态文件" class="headerlink" title="(2) 生成静态文件"></a>(2) 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate  <span class="hljs-comment"># 或 hexo clean &amp;&amp; hexo g</span><br></code></pre></td></tr></table></figure><p>生成的静态文件会保存在 <code>public/</code> 目录下（包括 <code>index.html</code>、<code>css/</code>、<code>js/</code> 等）。</p><hr><h2 id="4-部署到-GitHub-Pages"><a href="#4-部署到-GitHub-Pages" class="headerlink" title="4. 部署到 GitHub Pages"></a>4. 部署到 GitHub Pages</h2><h3 id="1-创建-GitHub-仓库"><a href="#1-创建-GitHub-仓库" class="headerlink" title="(1) 创建 GitHub 仓库"></a>(1) 创建 GitHub 仓库</h3><ul><li>登录 GitHub，新建仓库，命名为：<code>用户名.github.io</code></li><li>仓库需设为 Public（免费账户不支持私有 GitHub Pages）</li></ul><h3 id="2-安装部署插件"><a href="#2-安装部署插件" class="headerlink" title="(2) 安装部署插件"></a>(2) 安装部署插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="3-修改-Hexo-配置"><a href="#3-修改-Hexo-配置" class="headerlink" title="(3) 修改 Hexo 配置"></a>(3) 修改 Hexo 配置</h3><p>打开 <code>myblog/_config.yml</code>，修改如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://用户名.github.io</span>  <span class="hljs-comment"># 替换为你的 GitHub Pages 地址</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/用户名/用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h3 id="4-执行部署命令"><a href="#4-执行部署命令" class="headerlink" title="(4) 执行部署命令"></a>(4) 执行部署命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy  <span class="hljs-comment"># 或 hexo d</span><br></code></pre></td></tr></table></figure><p>首次部署可能要求输入 GitHub 账号密码，推荐配置 SSH 密钥以免密登录。</p><hr><h2 id="5-访问博客"><a href="#5-访问博客" class="headerlink" title="5. 访问博客"></a>5. 访问博客</h2><p>等待 1-2 分钟后访问：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//用户名.github.io</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-后续更新博客"><a href="#6-后续更新博客" class="headerlink" title="6. 后续更新博客"></a>6. 后续更新博客</h2><p>写新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;新文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>重新生成并部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><hr><h2 id="使用-SSH-方式替代-HTTPS（Windows操作系统）"><a href="#使用-SSH-方式替代-HTTPS（Windows操作系统）" class="headerlink" title="使用 SSH 方式替代 HTTPS（Windows操作系统）"></a>使用 SSH 方式替代 HTTPS（Windows操作系统）</h2><h3 id="1-删除旧-SSH-密钥（如果有）"><a href="#1-删除旧-SSH-密钥（如果有）" class="headerlink" title="(1) 删除旧 SSH 密钥（如果有）"></a>(1) 删除旧 SSH 密钥（如果有）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">del %USERPROFILE%\.ssh\id_ed25519*<br></code></pre></td></tr></table></figure><h3 id="2-生成新-SSH-密钥"><a href="#2-生成新-SSH-密钥" class="headerlink" title="(2) 生成新 SSH 密钥"></a>(2) 生成新 SSH 密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><ul><li>回车接受默认路径（<code>%USERPROFILE%\.ssh\id_ed25519</code>）</li><li>可选设置密码</li></ul><h3 id="3-添加公钥到-GitHub"><a href="#3-添加公钥到-GitHub" class="headerlink" title="(3) 添加公钥到 GitHub"></a>(3) 添加公钥到 GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> %USERPROFILE%\.ssh\id_ed25519.pub<br></code></pre></td></tr></table></figure><ul><li>全选输出内容（以 <code>ssh-ed25519</code> 开头）</li><li>访问 <a href="https://github.com/settings/keys">GitHub SSH 设置页面</a></li><li>点击 “New SSH Key”，粘贴公钥内容</li></ul><h3 id="4-测试-SSH-连接"><a href="#4-测试-SSH-连接" class="headerlink" title="(4) 测试 SSH 连接"></a>(4) 测试 SSH 连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><h3 id="5-修改-Hexo-配置为-SSH-地址"><a href="#5-修改-Hexo-配置为-SSH-地址" class="headerlink" title="(5) 修改 Hexo 配置为 SSH 地址"></a>(5) 修改 Hexo 配置为 SSH 地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:用户名/用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h3 id="6-强制重新部署"><a href="#6-强制重新部署" class="headerlink" title="(6) 强制重新部署"></a>(6) 强制重新部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy --force<br></code></pre></td></tr></table></figure><hr><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>访问：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>例如使用 Butterfly 主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./themes<br>git <span class="hljs-built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly butterfly<br></code></pre></td></tr></table></figure><p>然后修改根目录下的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">butterfly</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/19/hello-world/"/>
    <url>/2025/04/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
